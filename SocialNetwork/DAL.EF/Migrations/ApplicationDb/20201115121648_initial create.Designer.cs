// <auto-generated />
using DAL.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.EF.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201115121648_initial create")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Domain.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FriendshipId = 1
                        });
                });

            modelBuilder.Entity("DAL.Domain.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            FriendId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            FriendId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            FriendId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 1,
                            FriendId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            ChatId = 1,
                            FriendId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            ChatId = 1,
                            FriendId = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            ChatId = 1,
                            FriendId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            ChatId = 1,
                            FriendId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            ChatId = 1,
                            FriendId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            ChatId = 1,
                            FriendId = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DAL.Domain.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutMe = "In love with math and computing. Do you dare to complete? DM me then",
                            Age = 25,
                            City = "London",
                            Country = "England",
                            Email = "ada.love@gmail.com",
                            FirstName = "Ada",
                            LastName = "Lovelace",
                            PhoneNumber = "+380 44 446 6356",
                            University = "Oxford",
                            UserName = "ada.love"
                        },
                        new
                        {
                            Id = 2,
                            AboutMe = "Shy fancy boy",
                            Age = 18,
                            City = "New York",
                            Country = "USA",
                            Email = "tim@gmail.com",
                            FirstName = "Tim",
                            LastName = "Delaney",
                            PhoneNumber = "+380 44 538 6141",
                            University = "Grand Army",
                            UserName = "timmy"
                        },
                        new
                        {
                            Id = 3,
                            AboutMe = "I live in two worlds, one of them is the world of books",
                            Age = 23,
                            City = "Starts Hollow",
                            Country = "USA",
                            Email = "rory.gilmore@gmail.com",
                            FirstName = "Lorelai",
                            LastName = "Gilmore",
                            PhoneNumber = "+380 44 193 0152",
                            University = "Harvard",
                            UserName = "rory"
                        },
                        new
                        {
                            Id = 4,
                            AboutMe = "I run the dinner in the downtown, come only hungry",
                            Age = 45,
                            City = "Vinnytsia",
                            Country = "Ukraine",
                            Email = "luke.danes@gmail.com",
                            FirstName = "Luke",
                            LastName = "Danes",
                            PhoneNumber = "+380 44 038 0434",
                            UserName = "luke`s"
                        },
                        new
                        {
                            Id = 5,
                            AboutMe = "In love with dancing and music, protecting girls` rights",
                            Age = 17,
                            City = "New York",
                            Country = "USA",
                            Email = "del.marco@gmail.com",
                            FirstName = "Joey",
                            LastName = "Del Marco",
                            PhoneNumber = "+380 44 177 6783",
                            University = "NYU",
                            UserName = "jojo"
                        });
                });

            modelBuilder.Entity("DAL.Domain.Friendship", b =>
                {
                    b.HasOne("DAL.Domain.Chat", null)
                        .WithMany("Friendships")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Domain.User", "Friend")
                        .WithMany("Friendships")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Domain.Message", b =>
                {
                    b.HasOne("DAL.Domain.Chat", "Chat")
                        .WithMany("Message")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Domain.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
